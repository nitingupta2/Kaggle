{
    "collab_server" : "",
    "contents" : "---\ntitle: Kaggle - Predicting Survivors on Titanic\nauthor: \"Nitin Gupta\"\ndate: \"Thursday, October 09, 2014\"\noutput: html_document\n---\n\n\n### Reading Data\n```{r dataPrep, echo=FALSE, message=FALSE, warning=FALSE}\nreadData <- function(filePath, columnClasses, naStrings) {\n    df <- read.csv(filePath, colClasses=columnClasses, na.strings=naStrings)\n    return(df)\n}\n\ntrainColClasses <- c(\"character\",\"factor\",\"factor\",\"character\",\"factor\",\"numeric\",\n                     \"integer\",\"integer\",\"character\",\"numeric\",\"character\",\"factor\")\ntestColClasses <- trainColClasses[-2]\n\ndfRawTrain <- readData(\"train.csv\", trainColClasses, naStrings = c(NA,\"\"))\nsummary(dfRawTrain)\n\ndfRawTest <- readData(\"test.csv\", testColClasses, naStrings = c(NA,\"\"))\nsummary(dfRawTest)\n```\n\n\n### Exploratory Data Analysis\n```{r eda, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(Amelia)\nmissmap(dfRawTrain, main=\"Titanic training data - Missing Map\", col=c(\"yellow\",\"black\"), legend=F, y.lab=F, y.at=F)\nmissmap(dfRawTest, main=\"Titanic testing data - Missing Map\", col=c(\"yellow\",\"black\"), legend=F, y.lab=F, y.at=F)\n\n# Barplots & Histograms\nlibrary(ggplot2)\n# with(dfRawTrain, barplot(table(Survived), names.arg=c(\"Perished\",\"Survived\"), main=\"Passenger Fate\"))\n# with(dfRawTrain, barplot(table(Pclass), names.arg=c(\"First\",\"Second\",\"Third\"), main=\"Traveling Class\"))\n# with(dfRawTrain, barplot(table(Sex), main=\"Gender\"))\n# with(dfRawTrain, barplot(table(Embarked), names.arg=c(\"Cherbourg\",\"Queenstown\",\"Southampton\"), main=\"Embarked\"))\n# with(dfRawTrain, hist(Age, col=\"red\"))\n# with(dfRawTrain, hist(Fare, col=\"red\"))\n# with(dfRawTrain, hist(SibSp+Parch, col=\"red\", main=\"Histogram of FamilySize\", xlab=\"FamilySize\"))\nqplot(Survived, data=dfRawTrain, geom=\"bar\", fill=Survived, main=\"Passenger Fate\", ylab=\"\")\nqplot(Pclass, data=dfRawTrain, geom=\"bar\", fill=Pclass, main=\"Traveling Class\", ylab=\"\")\nqplot(Sex, data=dfRawTrain, geom=\"bar\", fill=Sex, main=\"Gender\", ylab=\"\")\nqplot(Embarked, data=dfRawTrain, geom=\"bar\", fill=Embarked, main=\"Embarked\", xlab=\"\", ylab=\"\")\nqplot(Age, data=dfRawTrain, fill=Sex, position=\"dodge\", main=\"Passenger Ages by Sex\")\nqplot(Fare, data=dfRawTrain, fill=Pclass, binwidth=20, main=\"Passenger Fare by Class\")\nqplot(SibSp+Parch, data=dfRawTrain, fill=Sex, position=\"dodge\", binwidth=1, main=\"FamilySize by Sex\", ylab=\"\")\n\n# Mosaicplots by Survival\nlibrary(vcd)\nwith(dfRawTrain, mosaicplot(Pclass ~ Survived, shade=F, color=c(\"black\",\"blue\"), \n                            xlab=\"Pclass\", ylab=\"Survived\", main=\"Passenger Fate by Traveling Class\"))\nwith(dfRawTrain, mosaicplot(Sex ~ Survived, shade=F, color=c(\"black\",\"blue\"), \n                            xlab=\"Sex\", ylab=\"Survived\", main=\"Passenger Fate by Gender\"))\nwith(dfRawTrain, mosaicplot(Embarked ~ Survived, shade=F, color=c(\"black\",\"blue\"), \n                            xlab=\"Embarked\", ylab=\"Survived\", main=\"Passenger Fate by Port\"))\n\n# Boxplots by Survival\n# with(dfRawTrain, boxplot(Age ~ Survived, main=\"Passenger Fate by Age\", xlab=\"Survived\", ylab=\"Age\"))\n# with(dfRawTrain, boxplot(Age ~ Pclass, main=\"Traveling Class by Age\", xlab=\"Pclass\", ylab=\"Age\"))\n# with(dfRawTrain, boxplot(Age ~ Sex, main=\"Gender by Age\", xlab=\"Sex\", ylab=\"Age\"))\nqplot(Survived, Age, data=dfRawTrain, fill=Sex, geom=\"boxplot\", main=\"Passenger Fate by Age/Sex\")\nqplot(Pclass, Age, data=dfRawTrain, fill=Survived, geom=\"boxplot\", main=\"Traveling Class by Age/Fate\")\n```\n\n\n### Feature Engineering & Preprocessing\n\n```{r featEngg, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(stringr)\nlibrary(plyr)\nlibrary(Hmisc)\n\nimputeMedianAge <- function(df=data.frame()) {\n    for(titleLevel in levels(df$Title)) {\n        df$Age[which(df$Title==titleLevel)] <- impute(df$Age[which(df$Title==titleLevel)])\n    }\n    return(df)\n}\n\nimputeMedianFare <- function(df=data.frame()) {\n    df$Fare[which(df$Fare==0)] <- NA\n    for(classLevel in levels(df$Pclass)) {\n        df$Fare[which(df$Pclass==classLevel)] <- impute(df$Fare[which(df$Pclass==classLevel)])\n    }\n    return(df)\n}\n\ngetFarePerPerson <- function(df=data.frame()) {\n    df$FarePP <- NA\n    for(ticketnum in unique(df$Ticket)) {\n        ticketGroupCount <- length(df$Fare[which(df$Ticket==ticketnum)])\n        df$FarePP[which(df$Ticket==ticketnum)] <- sum(df$Fare[which(df$Ticket==ticketnum)])/(ticketGroupCount^2)\n    }\n    return(df)\n}\n\npreProcessData <- function(df=data.frame()) {\n    # Fix NAs and zeros: Fare\n    # Impute median values by Pclass\n    df <- imputeMedianFare(df)\n\n    # Determine Fare per person (average ticket price, grouped by Ticket#)\n    df <- getFarePerPerson(df)\n\n    # Add Feature: FareRange\n    cutpoints <- quantile(df$FarePP, seq(0, 1, length=5))\n    df$FareRange <- cut(df$FarePP, cutpoints, include.lowest=T)\n    \n    # Relevel Factor: Survived\n    df$Survived <- revalue(df$Survived, c(\"0\"=\"Perished\", \"1\"=\"Survived\"))\n    # Relevel Factor: Pclass\n    df$Pclass <- revalue(df$Pclass, c(\"1\"=\"First\", \"2\"=\"Second\", \"3\"=\"Third\"))\n    \n    # Add feature: Title\n    vNames <- df$Name\n    vTitles <- sapply(vNames, FUN=function(x) str_trim(strsplit(x, \"[,.]\")[[1]][2]))\n    vTitles[vTitles %in% c(\"Mlle\",\"Ms\")]=\"Miss\"\n    vTitles[vTitles %in% c(\"Mme\")]=\"Mrs\"\n    vTitles[vTitles %in% c(\"Capt\",\"Col\",\"Don\",\"Dona\",\"Dr\",\"Jonkheer\",\n                           \"Lady\",\"Major\",\"Rev\",\"Sir\",\"the Countess\")]=\"Noble\"\n    df$Title <- as.factor(vTitles)\n\n    # Fix NAs: Age (impute median values by Title)\n    df <- imputeMedianAge(df)\n    \n    # Add Feature: AgeClass\n    df$AgeClass <- \"Adult\"\n    df$AgeClass[df$Title==\"Master\" | df$Age<=14] <- \"Child\"\n    df$AgeClass <- as.factor(df$AgeClass)\n\n    # Fix NAs: Embarked\n    df$Embarked[is.na(df$Embarked)] <- \"S\"\n    \n    # Add Feature: FamilySize\n    df$FamilySize <- df$SibSp + df$Parch + 1\n    \n    return(df)\n}\n\n# Merge training and test sets to impute missing values and create features\ndfRawTest$Survived <- NA \nvPassengerId.test <- dfRawTest$PassengerId\ndfMerged <- rbind(dfRawTrain, dfRawTest)\n# Preprocess merged dataset\ndfMerged <- preProcessData(dfMerged)\ndfMerged <- dfMerged[order(dfMerged$Pclass, dfMerged$Ticket),]\n# Separate back into training and test sets\ndfFinalTest <- dfMerged[dfMerged$PassengerId %in% vPassengerId.test,]\ndfFinalTrain <- dfMerged[!(dfMerged$PassengerId %in% vPassengerId.test),]\nrm(vPassengerId.test)\n\n# Plots of engineered features\nlibrary(Amelia)\nwith(dfFinalTrain, mosaicplot(Title ~ Survived , shade=F, color=c(\"black\",\"blue\"), \n                              xlab=\"Title\", ylab=\"Survived\", main=\"Passenger Fate by Title\"))\nwith(dfFinalTrain, mosaicplot(AgeClass ~ Survived , shade=F, color=c(\"black\",\"blue\"), \n                              xlab=\"AgeClass\", ylab=\"Survived\", main=\"Passenger Fate by AgeClass\"))\nwith(dfFinalTrain, mosaicplot(Pclass ~ Survived , shade=F, color=c(\"black\",\"blue\"), \n                              xlab=\"Pclass\", ylab=\"Survived\", main=\"Passenger Fate by Traveling Class\"))\nwith(dfFinalTrain, mosaicplot(FareRange ~ Survived , shade=F, color=c(\"black\",\"blue\"), \n                              xlab=\"FareRange\", ylab=\"Survived\", main=\"Passenger Fate by FareRange\"))\n\nlibrary(ggplot2)\nqplot(AgeClass, data=dfFinalTrain, fill=Sex, facets=~Survived, geom=\"bar\", position=\"dodge\")\nqplot(Survived, Age, data=dfFinalTrain, fill=Survived, facets=~Sex, geom=\"boxplot\", position=\"dodge\")\nqplot(Survived, FamilySize, data=dfFinalTrain, fill=Survived, geom=\"boxplot\")\nqplot(Survived, FarePP, data=dfFinalTrain, fill=Survived, geom=\"boxplot\")\n```\n\n\n### Model Building\n```{r models, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\nvFeatures <- c(\"Survived\", \"Pclass\", \"Sex\", \"FareRange\", \"AgeClass\", \"FamilySize\")\ndfClean <- dfFinalTrain[, vFeatures]\nsummary(dfClean)\n\n# Check to see any zero covariates\nlibrary(caret)\nnsv <- nearZeroVar(dfClean, saveMetrics=T)\nprint(nsv)\n\nset.seed(11)\ninTrain <- createDataPartition(dfClean$Survived, p=0.7, list=FALSE)\ntraining <- dfClean[inTrain, ]\nvalidation <- dfClean[-inTrain, ]\nrm(inTrain)\n\n# featurePlot(x=training[,vFeatures[-1]], y=training$Survived, plot=\"pairs\")\nfit <- glm(Survived ~ ., data=training, family=binomial(\"logit\"))\nsummary(fit)\nanova(fit, test=\"Chisq\")\n\nset.seed(11)\nmodel_1 <- train(Survived ~ ., data=training, method=\"rpart\", trControl=trainControl(method=\"cv\"))\npred_1 <- predict(model_1, validation)\ncm_1 <- confusionMatrix(pred_1, validation$Survived) \n\nset.seed(11)\nmodel_2 <- train(Survived ~ ., data=training, method=\"glm\", trControl=trainControl(method=\"cv\"))\npred_2 <- predict(model_2, validation)\ncm_2 <- confusionMatrix(pred_2, validation$Survived) \n\nset.seed(11)\nmodel_3 <- train(Survived ~ ., data=training, method=\"rf\", trControl=trainControl(method=\"cv\"))\npred_3 <- predict(model_3, validation)\ncm_3 <- confusionMatrix(pred_3, validation$Survived)\n\nset.seed(11)\nmodel_4 <- train(Survived ~ ., data=training, method=\"gbm\", verbose=F, trControl=trainControl(method=\"cv\"))\npred_4 <- predict(model_4, validation)\ncm_4 <- confusionMatrix(pred_4, validation$Survived)\n\nset.seed(11)\nmodel_5 <- train(Survived ~ ., data=training, method=\"treebag\", trControl=trainControl(method=\"cv\"))\npred_5 <- predict(model_5, validation)\ncm_5 <- confusionMatrix(pred_5, validation$Survived)\n\nset.seed(11)\nmodel_6 <- train(Survived ~ ., data=training, method=\"svmRadial\", trControl=trainControl(method=\"cv\"))\npred_6 <- predict(model_6, validation)\ncm_6 <- confusionMatrix(pred_6, validation$Survived)\n\nset.seed(11)\nmodel_7 <- train(Survived ~ ., data=training, method=\"lda\", trControl=trainControl(method=\"cv\"))\npred_7 <- predict(model_7, validation)\ncm_7 <- confusionMatrix(pred_7, validation$Survived)\n```\n\n\n### Combining Predictors (Majority Vote)\n```{r combineModels, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(caret)\nlibrary(plyr)\ngetCombinedPrediction <- function(facPred) {\n    vPred <- facPred==\"Survived\"\n    predVal <- \"Survived\"\n    if(sum(vPred)/length(vPred) < 0.5)\n        predVal <- \"Perished\"\n    return(predVal)\n}\ncombined <- data.frame(pred_1, pred_2, pred_3, pred_4, pred_5, pred_6, pred_7)\npred_0 <- apply(combined, 1, getCombinedPrediction)\npred_0 <- as.factor(pred_0)\ncm_0 <- confusionMatrix(pred_0, validation$Survived)\n```\n\n\n### Model Evaluation & Diagnostics \n```{r diagnostics, echo=FALSE, message=FALSE, warning=FALSE}\ncm <- data.frame(rbind(c(model_1$method, round(cm_1$overall[1:2],4), round(cm_1$byClass[1:4],4)),\n                       c(model_2$method, round(cm_2$overall[1:2],4), round(cm_2$byClass[1:4],4)),\n                       c(model_3$method, round(cm_3$overall[1:2],4), round(cm_3$byClass[1:4],4)),\n                       c(model_4$method, round(cm_4$overall[1:2],4), round(cm_4$byClass[1:4],4)),\n                       c(model_5$method, round(cm_5$overall[1:2],4), round(cm_5$byClass[1:4],4)),\n                       c(model_6$method, round(cm_6$overall[1:2],4), round(cm_6$byClass[1:4],4)),\n                       c(model_7$method, round(cm_7$overall[1:2],4), round(cm_7$byClass[1:4],4)),\n                       c(\"Combined\", round(cm_0$overall[1:2],4), round(cm_0$byClass[1:4],4))\n                       ))\ncolnames(cm)[1] <- \"Method\"\nprint(cm)\n\n# ROC Curves\nlibrary(pROC)\npred_1 <- predict(model_1, validation, type=\"prob\")\nroc_1 <- roc(response=validation$Survived, predictor=pred_1$Survived, levels=levels(validation$Survived))\npred_2 <- predict(model_2, validation, type=\"prob\")\nroc_2 <- roc(response=validation$Survived, predictor=pred_2$Survived, levels=levels(validation$Survived))\npred_3 <- predict(model_3, validation, type=\"prob\")\nroc_3 <- roc(response=validation$Survived, predictor=pred_3$Survived, levels=levels(validation$Survived))\npred_4 <- predict(model_4, validation, type=\"prob\")\nroc_4 <- roc(response=validation$Survived, predictor=pred_4$Survived, levels=levels(validation$Survived))\npred_5 <- predict(model_5, validation, type=\"prob\")\nroc_5 <- roc(response=validation$Survived, predictor=pred_5$Survived, levels=levels(validation$Survived))\npred_7 <- predict(model_7, validation, type=\"prob\")\nroc_7 <- roc(response=validation$Survived, predictor=pred_7$Survived, levels=levels(validation$Survived))\nplot(roc_1)\nplot(roc_2, add=T, col=2)\nplot(roc_3, add=T, col=3)\nplot(roc_4, add=T, col=4)\nplot(roc_5, add=T, col=5)\nplot(roc_7, add=T, col=7)\nlegendText <- c(model_1$method, model_2$method, model_3$method, model_4$method, model_5$method, model_7$method)\nlegend(\"bottomright\", legend=legendText, text.col=c(1:5,7))\n\n# Confidence Levels\nconflevels <- resamples(list(rpart=model_1, glm=model_2, rf=model_3, gbm=model_4,\n                             treebag=model_5, svmRadial=model_6, lda=model_7))\ndotplot(conflevels)\n```\n\n\n### Predictions\n```{r predictions, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(caret)\nlibrary(plyr)\npred_t1 <- predict(model_1, dfFinalTest)\npred_t2 <- predict(model_2, dfFinalTest)\npred_t3 <- predict(model_3, dfFinalTest)\npred_t4 <- predict(model_4, dfFinalTest)\npred_t5 <- predict(model_5, dfFinalTest)\npred_t6 <- predict(model_6, dfFinalTest)\npred_t7 <- predict(model_7, dfFinalTest)\ncombined_t <- data.frame(pred_t1, pred_t2, pred_t3, pred_t4, pred_t5, pred_t6, pred_t7)\npred_test <- apply(combined_t, 1, getCombinedPrediction)\npred_test <- as.factor(pred_test)\n\npred_test <- predict(model_2, dfFinalTest)\npred_test <- revalue(pred_test, c(\"Perished\"=\"0\",\"Survived\"=\"1\"))\nsubmit <- data.frame(PassengerId=dfFinalTest$PassengerId, Survived=pred_test)\nwrite.csv(submit, file=\"pred_combined.csv\", row.names=F)\nprint(submit)\n```\n",
    "created" : 1412891390740.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4065271638",
    "id" : "C8F1F508",
    "lastKnownWriteTime" : 1464804503,
    "last_content_update" : 0,
    "path" : "C:/Backups/Kaggle/Titanic/titanic.Rmd",
    "project_path" : "titanic.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}