{
    "collab_server" : "",
    "contents" : "---\ntitle: \"AllState_EDA\"\nauthor: \"Nitin Gupta\"\ndate: \"October 16, 2016\"\noutput: html_document\n---\n\n\n```{r LoadLibs, echo=FALSE, message=FALSE, warning=FALSE}\noptions(scipen = 5, width = 120)\nlibrary(forcats)\nlibrary(corrplot)\nlibrary(gridExtra)\nlibrary(vcd)\nlibrary(caTools)\nlibrary(caret)\nlibrary(e1071)\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(randomForest)\nlibrary(party)\nlibrary(ROCR)\nlibrary(plyr)\nlibrary(tidyverse)\n```\n\n\n```{r LoadRawData, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\ndfRawTrain <- read.csv(\"train.csv\", header = T)\ndfRawTest <- read.csv(\"test.csv\", header = T)\n\nID.VAR <- \"id\"\nTARGET.VAR <- \"loss\"\n\ndfRawTest$loss <- NA\n\nstr(dfRawTrain)\nsummary(dfRawTrain)\n\nvFeatures <- setdiff(names(dfRawTrain), c(ID.VAR, TARGET.VAR))\n\nvFeaturesType <- sapply(vFeatures, function(Z) class(dfRawTrain[,Z]))\ntable(vFeaturesType)\n\nvFeaturesCat <- names(dfRawTrain)[which(sapply(dfRawTrain, is.factor))]\nvFeaturesNum <- names(dfRawTrain)[which(sapply(dfRawTrain, is.numeric))]\nvFeaturesNum <- setdiff(vFeaturesNum, c(ID.VAR, TARGET.VAR))\n```\n\n\nNo missing data.\n\n```{r Missing, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\ndfCombined <- rbind(dfRawTrain, dfRawTest)\nsapply(names(dfCombined), function(Z) sum(is.na(dfCombined[,Z])))\n```\n\n\nCheck for duplicated rows\n\n```{r Duplicate, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\ncat(\"Number of duplicate rows =\", nrow(dfCombined) - nrow(unique(dfCombined)))\n```\n\n\n```{r PlotFunctions, echo=FALSE, message=FALSE, warning=FALSE}\n\nplotBox <- function(dfInput, colIndex, yval, ylabel) {\n    df <- data.frame(x = dfInput[[colIndex]], y = yval)\n    p <- ggplot(df) +\n        geom_boxplot(aes(x = x, y = y, fill = x)) +\n        xlab(colnames(dfInput)[colIndex]) + ylab(ylabel) +\n        guides(fill = FALSE) +\n        theme_light()\n    return(p)\n}\n\nplotDensity <- function(dfInput, colIndex, xscale = c(\"normal\",\"sqrt\",\"log10\"), yscale = c(\"normal\",\"sqrt\",\"log10\")) {\n    df <- data.frame(x = dfInput[[colIndex]])\n    p <- ggplot(df, aes(x = x)) +\n        geom_histogram(aes(y = ..density..), bins = 30, color = \"white\", fill = \"orange\") +\n        geom_density(alpha = 0.2, fill=\"#FF6666\") +\n        xlab(colnames(dfInput)[colIndex]) +\n        theme_light()\n    \n    if(xscale[1]==\"sqrt\") {\n        p <- p + scale_x_sqrt()\n    } else if(xscale[1] == \"log10\") {\n        p <- p + scale_x_log10()\n    }\n    \n    if(yscale[1]==\"sqrt\") {\n        p <- p + scale_y_sqrt()\n    } else if(yscale[1] == \"log10\") {\n        p <- p + scale_y_log10()\n    }\n    return(p)\n}\n\nplotHistogram <- function(dfInput, colIndex, xscale = c(\"normal\",\"sqrt\",\"log10\"), yscale = c(\"normal\",\"sqrt\",\"log10\")) {\n    df <- data.frame(x = dfInput[[colIndex]])\n    p <- ggplot(df) +\n        geom_histogram(aes(x = x), bins = 30, color = \"white\", fill = \"orange\") +\n        xlab(colnames(dfInput)[colIndex]) +\n        theme_light()\n    \n    if(xscale[1]==\"sqrt\") {\n        p <- p + scale_x_sqrt()\n    } else if(xscale[1] == \"log10\") {\n        p <- p + scale_x_log10()\n    }\n    \n    if(yscale[1]==\"sqrt\") {\n        p <- p + scale_y_sqrt()\n    } else if(yscale[1] == \"log10\") {\n        p <- p + scale_y_log10()\n    }\n    return(p)\n}\n\nplotScatter <- function(dfInput, colIndex, yval, ylabel) {\n    df <- data.frame(x = dfInput[[colIndex]], y = yval)\n    p <- ggplot(df, aes(x = x, y = y)) +\n        geom_point(alpha = 0.3) +\n        geom_smooth(method = lm, se = FALSE) +\n        xlab(colnames(dfInput)[colIndex]) + ylab(ylabel) +\n        theme_light()\n    return(p)\n}\n\nplotScatter2 <- function(dfInput, xcolName, ycolName) {\n    df <- data.frame(x = dfInput[[xcolName]], y = dfInput[[ycolName]])\n    p <- ggplot(df, aes(x = x, y = y)) +\n        geom_point(alpha = 0.3) +\n        geom_smooth(method = lm, se = FALSE) +\n        xlab(xcolName) + ylab(ycolName) +\n        theme_light()\n    return(p)\n}\n\n\ndoPlotsSingleVar <- function(plotFunc, dfInput, vColIndexes, \n                             xscale = c(\"normal\", \"sqrt\", \"log10\"), \n                             yscale = c(\"normal\",\"sqrt\",\"log10\"), \n                             ncol = 3) {\n    lPlots <- list()\n    for(i in vColIndexes) {\n        p <- plotFunc(dfInput, i, xscale, yscale)\n        lPlots <- c(lPlots, list(p))\n    }\n    do.call(\"grid.arrange\", c(lPlots, ncol = min(length(vColIndexes), ncol)))\n}\n\ndoPlotsDoubleVar <- function(plotFunc, dfInput, vColIndexes, yval, ylabel, ncol = 3) {\n    lPlots <- list()\n    for(i in vColIndexes) {\n        p <- plotFunc(dfInput, i, yval, ylabel)\n        lPlots <- c(lPlots, list(p))\n    }\n    do.call(\"grid.arrange\", c(lPlots, ncol = min(length(vColIndexes), ncol)))\n}\n```\n\n\n```{r Boxplots, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\nlSplits <- split(seq_along(vFeaturesCat), ceiling(seq_along(vFeaturesCat)/4))\nfor(i in seq_along(lSplits)) {\n    vSplits <- lSplits[[i]]\n    doPlotsDoubleVar(plotBox, dfCombined[vFeaturesCat], vSplits, log(dfCombined$loss), \"log(loss)\", ncol = 2)\n}\n```\n\n\n```{r Densityplots, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\nlSplits <- split(seq_along(vFeaturesNum), ceiling(seq_along(vFeaturesNum)/9))\nfor(i in seq_along(lSplits)) {\n    vSplits <- lSplits[[i]]\n    doPlotsSingleVar(plotDensity, dfCombined[vFeaturesNum], vSplits, ncol = 3)\n}\n```\n\n\n```{r Scatterplots, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\nlSplits <- split(seq_along(vFeaturesNum), ceiling(seq_along(vFeaturesNum)/9))\nfor(i in seq_along(lSplits)) {\n    vSplits <- lSplits[[i]]\n    doPlotsDoubleVar(plotScatter, dfCombined[vFeaturesNum], vSplits, log(dfCombined$loss), \"log(loss)\", ncol = 3)\n}\n```\n\n\n```{r recategorize, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\n# recategorize factors where the number of cases are below 0.1% threshold\nprint(\"Recategorizing seldom used factor levels\")\n\nthreshold <- 0.001\nfor(catFeature in vFeaturesCat) {\n    if(length(levels(dfCombined[[catFeature]])) >= 5) {\n        dfCombined[[catFeature]] <- fct_lump(dfCombined[[catFeature]], prop = threshold)\n    }\n}\nlSplits <- split(seq_along(vFeaturesCat), ceiling(seq_along(vFeaturesCat)/4))\nfor(i in seq_along(lSplits)) {\n    vSplits <- lSplits[[i]]\n    doPlotsDoubleVar(plotBox, dfCombined[vFeaturesCat], vSplits, log(dfCombined$loss), \"log(loss)\", ncol = 2)\n}\n```\n\n\nCorrelations\n\n```{r Correlations, echo=FALSE, message=FALSE, warning=FALSE}\nmCor <- cor(dfCombined[vFeaturesNum])\ncorrplot(mCor, method = \"square\", order = \"hclust\")\n\ncor_threshold <- 0.7\ndfCor <- data.frame()\nfor(i in 1:(ncol(mCor)-1)) {\n    for(j in (i+1):ncol(mCor)) {\n        if(abs(mCor[i,j]) >= cor_threshold) {\n            dfCor <- rbind(dfCor, data.frame(Feature1 = colnames(mCor)[i], \n                                             Feature2 = colnames(mCor)[j],\n                                             Correlation = mCor[i, j],\n                                             stringsAsFactors = F))\n        }\n    }\n}\n\ndfCor <- dfCor %>% arrange(desc(abs(Correlation)))\n```\n\n\nNumeric features with correlations greater than `r cor_threshold`\n\n```{r HighCorrelations, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\nfor(i in seq_along(dfCor$Feature1)) {\n    xcolName <- dfCor$Feature1[i]\n    ycolName <- dfCor$Feature2[i]\n    print(plotScatter2(dfCombined, xcolName, ycolName))\n}\n```\n\n\n```{r FinalDataSets, echo=FALSE, message=FALSE, warning=FALSE}\ndfTrain <- dfCombined %>% dplyr::filter(!is.na(loss))\ndfTest <- dfCombined %>% dplyr::filter(is.na(loss)) %>% select(-loss)\n\n# Remove combined data frame\nrm(dfCombined) ; rm(dfRawTrain) ; rm(dfRawTest)\n```\n\n\n```{r saveTrainTest, echo=FALSE, message=FALSE, warning=FALSE}\nwrite.csv(dfTrain, file = \"train_final.csv\", row.names = F, quote = F)\nwrite.csv(dfTest, file = \"test_final.csv\", row.names = F, quote = F)\n```\n",
    "created" : 1480304234675.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3703342376",
    "id" : "564BE2CE",
    "lastKnownWriteTime" : 1482120240,
    "last_content_update" : 1482120240775,
    "path" : "C:/Backups/Kaggle/AllState/AllState_EDA.Rmd",
    "project_path" : "AllState_EDA.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}