source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-USER_ID))
names(dfTrain)
classifier
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-USER_ID), control = Weka_control(K = 20, X = TRUE))
classifier
summary(classifier)
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-USER_ID))
summary(classifier)
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-USER_ID), control = Weka_control(K = 5))
classifier
summary(classifier)
head(classifier$predictions)
evaluate_Weka_classifier(classifier, numFolds = 10)
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-USER_ID))
summary(classifier)
evaluate_Weka_classifier(classifier, numFolds = 10)
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-USER_ID), control = Weka_control(K = 50, X = TRUE))
classifier
summary(classifier)
evaluate_Weka_classifier(classifier, numFolds = 10)
yhat <- classifier$predictions
ylabel <- dfTrain$Party
ModelMetrics::auc(ylabel, yhat)
caret::confusionMatrix(ylabel, yhat)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
ModelMetrics::confusionMatrix(ylabel, yhat)
?ModelMetrics::confusionMatrix
y = getinfo(x_train, "label")
ModelMetrics::confusionMatrix(y, yhat)
y_pred = as.integer(yhat > 0.5)
y_pred = as.integer(yhat)-1
confMatrix <- ModelMetrics::confusionMatrix(y, y_pred)
confMatrix
??confusionMatrix
mda::confusion(y, y_pred)
RSNNS::confusion(y, y_pred)
RSNNS::confusionMatrix(y, y_pred)
klaR::errormatrix(y, y_pred)
klaR::errormatrix(y, y_pred, F)
klaR::errormatrix(y, y_pred, T)
confMatrix <- caret::confusionMatrix(y, y_pred)
confMatrix
confMatrix <- caret::confusionMatrix(y, y_pred, mode = "prec_recall")
confMatrix
tbl <- table(y_pred, y)
tbl
e1071::classAgreement(tbl)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
ModelMetrics::confusionMatrix(y, y_pred)
ModelMetrics::ce(y, y_pred)
1 - ModelMetrics::ce(y, y_pred)
?ModelMetrics::ce
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source("preProcessing_VotersParty.R")
cvFileName <- paste0("cv_kNN_", preProcessFuncName , ".csv")
rm(dfRawTrain) ; rm(dfRawTest)
source("preProcessing_VotersParty.R")
cvFileName <- paste0("cv_kNN_", preProcessFuncName , ".csv")
dfModelTrain <- dfTrain %>% select(starts_with(-ID_VAR))
dfModelTrain <- dfTrain %>% select(-starts_with(ID_VAR))
rm(dfModelTrain)
dfTrain_Model <- dfTrain %>% select(-starts_with(ID_VAR))
classifier <- IBk(Party ~ ., data = dfTrain_Model, control = Weka_control(K = 60, X = TRUE))
summary(classifier)
classifier
cv_res <- evaluate_Weka_classifier(classifier, numFolds = 10)
cv_res
summary(cv_res)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
?seq
k <- 2 * sqrt(2)^seq(0, 6)
k <- (sqrt(2)^seq(0, 6))*2
k <- as.integer(2 * sqrt(2)^seq(0, 6))
k <- ceiling(2 * sqrt(2)^seq(0, 6))
k <- floor(2 * sqrt(2)^seq(0, 6))
k <- floor(sqrt(2)^seq(0, 6))
k <- round(2 * sqrt(2)^seq(0, 6))
k <- round(2 * sqrt(2)^seq(0, 8))
k <- round(2 * sqrt(2)^seq(0, 10))
l
k
k
vKNN <- round(2 * sqrt(2)^seq(0, 10))
rm(dfTrain_Model)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
head(lPred_train[[1]])
dfMerged[lOutput$vFeaturesDemographic] %>% summary()
head(lPred_train[[1]])
tail(lPred_train[[1]])
sum(is.na(lPred_train[[1]]))
head(vTrain)
length(vTrain)
vTrain <- rep(NA, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
lFolds <- caret::createFolds(dfTrain[[TARGET_VAR]], k = numFolds)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
names(vTrain)
length(names(vTrain))
length(unique(names(vTrain)))
head(lFolds[[1]])
head(lFolds[[2]])
head(lFolds[[3]])
head(lFolds[[6]])
head(lFolds[[9]])
vTrain
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
vTrain <- rep(NA, nrow(dfTrain)) ; names(vTrain) <- as.character(dfTrain[[ID_VAR]])
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- as.character(dfTrain[[ID_VAR]])
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- as.character(dfTrain[[ID_VAR]])
head(vTrain)
class(names(vTrain))
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
class(names(vTrain))
i <- 1
print(paste("Training", i, "of", numFolds, "folds using seed", seedForFolds))
idx_test <- lFolds[[i]]
dfTest_fold <- dfTrain[idx_test,] %>% select(-starts_with(ID_VAR))
dfTrain_fold <- dfTrain[-idx_test,] %>% select(-starts_with(ID_VAR))
print(paste("Training fold observations:", nrow(dfTrain_fold)))
print(paste("Test fold observations:", nrow(dfTest_fold)))
classifier <- IBk(Party ~ ., data = dfTrain_fold, control = Weka_control(K = k))
pred_fold <- predict(classifier, newdata = dfTest_fold)
vTrain[idx_test] <- as.character(pred_fold)
head(vTrain)
head(idx_test)
head(vTrain, 20)
sum(is.na(pred_fold))
vTrain[idx_test] <- as.character(pred_fold)
head(vTrain, 20)
vTrain[as.character(idx_test)] <- as.character(pred_fold)
vTrain[idx_test] <- as.character(pred_fold)
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
vTrain[which(names(vTrain)==idx_test)] <- as.character(pred_fold)
vTrain[which(names(vTrain) %in% idx_test)] <- as.character(pred_fold)
vTrain[which(names(vTrain) %in% as.character(idx_test))] <- as.character(pred_fold)
head(vTrain, 20)
vTrain[which(idx_test %in% names(vTrain))] <- as.character(pred_fold)
class(idx_test)
vTrain[as.character(idx_test)] <- as.character(pred_fold)
head(vTrain, 20)
sum(which(names(vTrain) %in% idx_test))
sum(which(names(vTrain) %in% as.character(idx_test)))
?replace
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
vTrain <- replace(vTrain, which(names(vTrain) %in% idx_test), pred_fold)
z <- which(names(vTrain) %in% idx_test)
names(vTrain)
idx_test
vTrain[idx_test] <- vTrain[idx_test] + as.character(pred_fold)
vTrain[idx_test] <- as.character(pred_fold)
head(vTrain, 20)
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
vTrain[idx_test] <- as.character(pred_fold)
head(vTrain, 20)
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
vTrain <- replace(vTrain, idx_test, pred_fold)
head(vTrain, 20)
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
vTrain <- replace(vTrain, as.list(idx_test), as.character(pred_fold))
vTrain <- replace(vTrain, list(idx_test), as.character(pred_fold))
vTrain <- replace(vTrain, idx_test, as.character(pred_fold))
head(vTrain, 20)
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
vTrain <- replace(vTrain, which(as.integer(names(vTrain)) %in% idx_test), as.character(pred_fold))
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
vTestIDs <- dfTrain[idx_test,]$USER_ID
vTrain <- replace(vTrain, vTestIDs, as.character(pred_fold))
head(vTrain, 20)
tail(vTrain, 20)
vTestIDs <- dfTrain[idx_test,]$USER_ID %>% as.character()
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
vTrain <- replace(vTrain, which(names(vTrain) %in% vTestIDs), as.character(pred_fold))
tail(vTrain, 20)
head(vTrain, 20)
vTrain <- rep(NA_character_, nrow(dfTrain)) ; names(vTrain) <- dfTrain[[ID_VAR]]
# Generate folds for cross-validation
seedForFolds <- vSeeds[v]
set.seed(seedForFolds)
lFolds <- caret::createFolds(dfTrain[[TARGET_VAR]], k = numFolds)
print(paste("Nearest neighbors:", k))
for(i in 1:numFolds) {
print(paste("Training", i, "of", numFolds, "folds using seed", seedForFolds))
idx_test <- lFolds[[i]]
dfTest_fold <- dfTrain[idx_test,] %>% select(-starts_with(ID_VAR))
dfTrain_fold <- dfTrain[-idx_test,] %>% select(-starts_with(ID_VAR))
print(paste("Training fold observations:", nrow(dfTrain_fold)))
print(paste("Test fold observations:", nrow(dfTest_fold)))
classifier <- IBk(Party ~ ., data = dfTrain_fold, control = Weka_control(K = k))
pred_fold <- predict(classifier, newdata = dfTest_fold)
vTestIDs <- dfTrain[idx_test,]$USER_ID %>% as.character()
vTrain <- replace(vTrain, which(names(vTrain) %in% vTestIDs), as.character(pred_fold))
}
sum(is.na(vTrain))
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
sum(is.na(lPred_train[[2]]))
getAccuracy <- function(yactual, ypred) {
return(1 - ModelMetrics::ce(yactual, ypred))
}
lapply(lPred_train, function(x) getAccuracy(dfTrain$Party, x))
?ModelMetrics::ce
getAccuracy <- function(yactual, ypred) {
yactual <- as.character(yactual)
ypred <- as.character(ypred)
return(1 - ModelMetrics::ce(yactual, ypred))
}
lapply(lPred_train, function(x) getAccuracy(dfTrain$Party, x))
yactual <- dfTrain$Party
ypred <- lPred_train[[2]]
ModelMetrics::ce
ModelMetrics::ce(yactual, ypred)
ypred <- as.factor(lPred_train[[2]])
ModelMetrics::ce(yactual, ypred)
?as.character.factor
getAccuracy <- function(yactual, ypred) {
yactual <- as.factor(as.character(yactual))
ypred <- as.factor(as.character(ypred))
return(1 - ModelMetrics::ce(yactual, ypred))
}
lapply(lPred_train, function(x) getAccuracy(dfTrain$Party, x))
lAccuracy <- lapply(lPred_train, function(x) getAccuracy(dfTrain[[TARGET_VAR]], x))
mean_accuracy <- mean(lAccuracy)
mean_accuracy <- mean(unlist(lAccuracy))
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
print(tail(dfCV %>% arrange(cv_mean)))
classifier <- IBk(Party ~ ., data = dfTrain, control = Weka_control(K = 64, X = TRUE))
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)), control = Weka_control(K = 64, X = TRUE))
classifier
ncol(dfTrain)
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)), control = Weka_control(K = 100, X = TRUE))
classifier
cv_res <- evaluate_Weka_classifier(classifier, numFolds = 10)
cv_res
summary(classifier)
vKNN <- round(2 * sqrt(2)^seq(11, 16))
vKNN <- round(2 * sqrt(2)^seq(11, 15))
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)), control = Weka_control(K = 500, X = TRUE))
classifier
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)), control = Weka_control(K = 600, X = TRUE))
classifier
seedForFolds <- 2016
library(Matrix)
library(magrittr)
library(tidyverse)
library(ggplot2)
library(RWeka)
preProcessFuncName <- "preProcess8"
ID_VAR <- "USER_ID"
TARGET_VAR <- "Party"
if(preProcessFuncName == "preProcess8") {
lParams_kNN <- list(k = 390)
}
dfTrain <- read.table(file = paste0("train_", preProcessFuncName, ".tsv"), header = T, sep = "")
dfTest <- read.table(file = paste0("test_", preProcessFuncName, ".tsv"), header = T, sep = "")
ntrain <- nrow(dfTrain)
ntest <- nrow(dfTest)
SEED <- 2016
# Set number of rounds for out of fold predictions
numRoundsForFolds <- 5
numFolds <- 10
# Set primary seed for generating other seeds
set.seed(SEED)
# Generate seeds for creating folds
vSeeds <- sample(10000, numRoundsForFolds)
lPred_train <- list()
lPred_test <- list()
vTrain <- rep(0, ntrain) ; names(vTrain) <- dfTrain[[ID_VAR]]
vTest <- rep(0, ntest) ; names(vTest) <- dfTest[[ID_VAR]]
vTestIDs <- as.character(dfTest[[ID_VAR]])
v <- 1
seedForFolds <- vSeeds[v]
set.seed(seedForFolds)
lFolds <- caret::createFolds(dfTrain[[TARGET_VAR]], k = numFolds)
print("Parameters used:")
print(as.data.frame(lParams_kNN))
i <- 1
print(paste("Training", i, "of", numFolds, "folds using seed", seedForFolds))
idx_test <- lFolds[[i]]
dfTest_fold <- dfTrain[idx_test,]
dfTrain_fold <- dfTrain[-idx_test,]
set.seed(seedForFolds)
classifier <- IBk(Party ~ .,
data = dfTrain_fold %>% select(-starts_with(ID_VAR)),
control = Weka_control(K = lParams_kNN$k))
pred_oof <- predict(classifier, newdata = dfTest_fold %>% select(-starts_with(ID_VAR)))
pred_test <- predict(classifier, newdata = dfTest %>% select(-starts_with(ID_VAR)))
model_kNN <- function(dfTrain_fold, dfTest_fold, seedForFolds) {
set.seed(seedForFolds)
classifier <- IBk(Party ~ .,
data = dfTrain_fold %>% select(-starts_with(ID_VAR)),
control = Weka_control(K = lParams_kNN$k))
pred_oof <- predict(classifier, newdata = dfTest_fold %>% select(-starts_with(ID_VAR)))
pred_test <- predict(classifier, newdata = dfTest %>% select(-starts_with(ID_VAR)))
return(list(id_oof = dfTest_fold[[ID_VAR]],
pred_oof = as.integer(pred_oof) - 1,
pred_test = as.integer(pred_test) - 1))
}
lResults <- model_kNN(dfTrain_fold, dfTest_fold, seedForFolds)
head(lResults$id_oof)
head(lResults$pred_oof)
head(lResults$pred_test)
source('C:/Backups/Kaggle/VotersParty/model_kNN_ensemble.R', echo=TRUE)
install.packages("neuralnet")
sample(100, 15)
sample(100, 15)
sample(100, 15)
sample(100, 15)
source('C:/Backups/Kaggle/VotersParty/model_kNN_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
34+65
98+85
68+78
95+812
90+20
900+100
1
12+70
rt+kj
67+80
rt <- 2
kj <- 3
rt+kj
87+100
2000+3000
90006000
0019000
20+9000
1000+8000
80009000
70009000
8000+9000
80005000+
3
8000+9000
help.search("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
head(dfTrain)
library(neuralnet)
library(Matrix)
library(magrittr)
library(tidyverse)
library(ggplot2)
library(xgboost)
nn <- neuralnet(Party ~ ., data = dfTrain %>% select(-starts_with("USER_ID")))
installed.packages("neuralnet")
sqrt(5569)
library(e1071)
?svm
preProcessFuncName <- "preProcess3"
preProcessFuncName <- "preProcess3"
source("preProcessing_VotersParty.R")
source("preProcessing_VotersParty.R")
lapply(dfMerged, FUN = function(x) if(is.factor(x)) {levels(x)})
lapply(dfMerged, FUN = function(x) if(is.factor(x)) {levels(x) ; "dnr" %in% levels(x)})
?relevel
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)), control = Weka_control(K = 700, X = TRUE))
classifier
summary(classifier)
classifier$levels
classifier$terms
classifier$call
classifier
classifier$classifier
classifier$classifier$`globalInfo()`
classifier$classifier$`toString()`
classifier$classifier$getKNN
classifier$classifier$getKNN()
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
classifier$classifier$getKNN()
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
fit_svm <- svm(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)))
fit_svm
summary(fit_svm)
class(fit_svm)
fit_svm$coefs
summary(fit_svm)
1/(ncol(dfTrain)-2)
pred_svm <- predict(fit_svm, newdata = dfTest)
pred_svm <- predict(fit_svm, newdata = dfTest %>% select(-starts_with(ID_VAR)))
x_train <- dfTrain %>% select(-starts_with(ID_VAR, TARGET_VAR))
x_train <- dfTrain %>% select(-starts_with(ID_VAR), -starts_with(TARGET_VAR))
y_train <- dfTrain[[TARGET_VAR]]
x_test <- dfTest %>% select(-starts_with(ID_VAR), -starts_with(TARGET_VAR))
pred_svm <- predict(x = x_train, y = y_train)
fit_svm <- svm(x = x_train, y = y_train)
x_train <- sparse.model.matrix(dfTrain %>% select(-starts_with(ID_VAR), -starts_with(TARGET_VAR)))
x_train <- sparse.model.matrix(data = dfTrain %>% select(-starts_with(ID_VAR), -starts_with(TARGET_VAR)))
x_train <- sparse.model.matrix(Party ~ . -1, data = dfTrain %>% select(-starts_with(ID_VAR)))
x_test <- sparse.model.matrix(Party ~ . -1, data = dfTest %>% select(-starts_with(ID_VAR)))
fit_svm <- svm(x = x_train, y = y_train)
y_train <- dfTrain[[TARGET_VAR]]
fit_svm <- svm(x = x_train, y = y_train)
source("preProcessing_VotersParty.R")
fit_svm <- svm(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)))
?tune.svm
x_train <- dfTrain %>% select(-USER_ID, -Party)
y_train <- dfTrain[["Party"]]
fit_svm <- svm(x = x_train, y = y_train)
warnings()
fit_svm <- svm(x = x_train, y = y_train)
fit_svm <- svm(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)))
table(fit_svm$fitted, dfTrain[[TARGET_VAR]])
length(fit_svm$fitted)
source("preProcessing_VotersParty.R")
fit_svm <- svm(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)))
length(fit_svm$fitted)
table(fit_svm$fitted, dfTrain[[TARGET_VAR]])
1 - ModelMetrics::ce(dfTrain[[TARGET_VAR]], fit_svm$fitted)
x_train <- dfTrain %>% select(-USER_ID, -TARGET_VAR)
x_train <- dfTrain %>% select(-USER_ID, -Party)
y_train <- dfTrain[["Party"]]
fit_svm <- svm(x = x_train, y = y_train)
pred_svm <- predict(fit_svm, newdata = dfTest)
fm1 <- as.formula(paste("Party ~ ."))
fm1
source("preProcessing_VotersParty.R")
classifier <- IBk(Party ~ ., data = dfTrain %>% select(-starts_with(ID_VAR)), control = Weka_control(K = 700, X = TRUE))
k_prelim <- classifier$classifier$getKNN()
print(paste("Preliminary k value:", k_prelim))
source('C:/Backups/Kaggle/VotersParty/model_kNN_ensemble.R', echo=TRUE)
?sapply
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
df <- data.frame()
x <- rnorm(100)
y <- rnorm(100)
df[[1]] <- x
df[1] <- x
df[["1"]] <- x
df["1"] <- x
df$x <- x
df[["X1"]] <- x
library(parallel)
library(foreach)
?foreach
library(foreach)
library(parallel)
library(doParallel)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
form <- as.formula(paste(TARGET_VAR, ".", sep = " ~ "))
rm(formula1)
rm(form)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
head(parallelResult)
head(lPred_train)
head(lPred_train[[1]])
length(lPred_train[[1]])
vAccuracy
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
length(unique(parallelResult$ID))
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_kNN_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
dfMerged %>% summary()
source("preProcessing_VotersParty.R")
dfMerged %>% summary()
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
dfParams <- expand.grid(cost=c(1, 10, 100),
gamma=10^(-6:-2))
print(dfParams)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_tune.R', echo=TRUE)
dfCV <- read.table(file = cvFileName, header = T)
print(tail(dfCV %>% arrange(cv_mean)))
dfCV <- read.table(file = cvFileName, header = T)
print(tail(dfCV %>% arrange(cv_mean)))
preProcessFuncName
source('C:/Backups/Kaggle/VotersParty/model_svm_ensemble.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_svm_ensemble.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(lPred_model)
