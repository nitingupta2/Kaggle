# Pre-process data - First way
########################################################################################################################
preProcess1 <- function(dfMerged) {
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set the maximum factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- names(which.max(table(dfMerged[[feature]])))
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
}
}
return(dfMerged)
}
# Pre-process data - Second way
########################################################################################################################
preProcess2 <- function(dfMerged) {
# Since many respondents have not provided demographic and survey questions, # of valid responses need to be recorded
dfMerged$NumSurveyAns <- apply(dfMerged[vFeaturesSurveyQues], 1, function(Z) sum(!is.na(Z)))
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set 'dnr' to factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- "dnr"
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
dfMerged[[feature]] <- relevel(dfMerged[[feature]], "dnr")
}
}
return(dfMerged)
}
# Pre-process data - Third way
#########################################################################################################################
preProcess3 <- function(dfMerged) {
# Since many respondents have not provided demographic and survey questions, # of valid responses need to be recorded
dfMerged$NumSurveyAns <- apply(dfMerged[vFeaturesSurveyQues], 1, function(Z) sum(!is.na(Z)))
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set 'dnr' to factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- "dnr"
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
dfMerged[[feature]] <- relevel(dfMerged[[feature]], "dnr")
}
}
# With chisq goodness of fit determine survey questions whose probability distribution
# is very different from Party distribution in the data set
dfXsq <- data.frame()
indexTarget <- which(names(dfMerged) == TARGET_VAR)
for(i in seq_along(vFeaturesSurveyQues)) {
indexQ <- which(names(dfMerged) == vFeaturesSurveyQues[i])
tbl <- table(unlist(dfMerged[,indexTarget]), unlist(dfMerged[,indexQ]))
Xsq <- chisq.test(tbl)
dfXsq <- rbind(dfXsq, data.frame(surveyQues = vFeaturesSurveyQues[i], pvalue = Xsq$p.value))
}
chisq_threshold_pvalue <- 0.05
dfXsq <- dfXsq %>% dplyr::filter(pvalue < chisq_threshold_pvalue) %>% arrange(pvalue)
vFeaturesSurveyInterest <- as.character(dfXsq$surveyQues)
# reduce survey questions in the final data set
return(dfMerged[c(ID_VAR, TARGET_VAR, "NumSurveyAns", vFeaturesDemographic, vFeaturesSurveyInterest)])
}
# Pre-process data - Fourth & Fifth way
#########################################################################################################################
preProcess4 <- function(dfMerged, chisq_threshold_pvalue = 0.05) {
# Since many respondents have not provided demographic and survey questions, # of valid responses need to be recorded
dfMerged$NumSurveyAns <- apply(dfMerged[vFeaturesSurveyQues], 1, function(Z) sum(!is.na(Z)))
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB)) %>%
mutate(Age = 2016 - YOB) %>%
mutate(Age_group = cut(Age, c(0, 18, 44, 64, 90)))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set 'dnr' to factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- "dnr"
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
dfMerged[[feature]] <- relevel(dfMerged[[feature]], "dnr")
}
}
# With chisq goodness of fit determine survey questions whose probability distribution
# is very different from Party distribution in the data set
dfXsq <- data.frame()
indexTarget <- which(names(dfMerged) == TARGET_VAR)
for(i in seq_along(vFeaturesSurveyQues)) {
indexQ <- which(names(dfMerged) == vFeaturesSurveyQues[i])
tbl <- table(unlist(dfMerged[,indexTarget]), unlist(dfMerged[,indexQ]))
Xsq <- chisq.test(tbl)
dfXsq <- rbind(dfXsq, data.frame(surveyQues = vFeaturesSurveyQues[i], pvalue = Xsq$p.value))
}
dfXsq <- dfXsq %>% dplyr::filter(pvalue < chisq_threshold_pvalue) %>% arrange(pvalue)
vFeaturesSurveyInterest <- as.character(dfXsq$surveyQues)
# reduce survey questions in the final data set
dfMerged <- dfMerged[c(ID_VAR, TARGET_VAR, "Age_group", "NumSurveyAns", vFeaturesDemographic, vFeaturesSurveyInterest)]
dfMerged <- dfMerged %>% select(-YOB)
return(dfMerged)
}
# Pre-process data - Sixth & Seventh way
#########################################################################################################################
preProcess6 <- function(dfMerged, chisq_threshold_pvalue = 0.05) {
# Since many respondents have not provided demographic and survey questions, # of valid responses need to be recorded
dfMerged$NumSurveyAns <- apply(dfMerged[vFeaturesSurveyQues], 1, function(Z) sum(!is.na(Z)))
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB)) %>%
mutate(Age = 2016 - YOB) %>%
mutate(Age_group = cut(Age, c(0, 18, 44, 64, 90)))
# With chisq goodness of fit determine survey questions whose probability distribution
# is very different from Party distribution in the data set
dfXsq <- data.frame()
for(surveyQues in vFeaturesSurveyQues) {
tbl <- table(unlist(dfMerged[[TARGET_VAR]]), unlist(dfMerged[[surveyQues]]))
Xsq <- chisq.test(tbl)
dfXsq <- rbind(dfXsq, data.frame(surveyQues = surveyQues, pvalue = Xsq$p.value))
}
dfXsq <- dfXsq %>% dplyr::filter(pvalue < chisq_threshold_pvalue) %>% arrange(pvalue)
vFeaturesSurveyInterest <- as.character(dfXsq$surveyQues)
# Valid responses to interesting questions
dfMerged$NumSurveyAnsInterest <- apply(dfMerged[vFeaturesSurveyInterest], 1, function(Z) sum(!is.na(Z)))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set 'dnr' to factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- "dnr"
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
dfMerged[[feature]] <- relevel(dfMerged[[feature]], "dnr")
}
}
# Create a feature 'IsLiberal' from the answers to the survey questions of interest
dfMerged$IsLiberal <- "unknown"
dfMerged <- dfMerged %>%
mutate(IsLiberal = case_when(Q109244 == "Yes" ~ "Yes",
Q115611 == "Yes" ~ "No",
Q113181 == "Yes" ~ "No",
Q113181 == "No" & Q115611 == "No" & Q109244 == "No" ~ "Yes"))
# reduce survey questions in the final data set
dfMerged <- dfMerged[c(ID_VAR, TARGET_VAR, "Age_group", "NumSurveyAnsInterest", "IsLiberal",
vFeaturesDemographic, vFeaturesSurveyInterest)]
dfMerged <- dfMerged %>% select(-YOB)
return(dfMerged)
}
########################################################################################################################
# Select Preprocessing function
########################################################################################################################
# Combine raw training and test sets
dfMerged <- rbind(dfRawTrain, dfRawTest)
summary(dfMerged)
preProcessFuncName <- "preProcess7"
if(preProcessFuncName == "preProcess1") {
dfMerged <- preProcess1(dfMerged)
} else if(preProcessFuncName == "preProcess2") {
dfMerged <- preProcess2(dfMerged)
} else if(preProcessFuncName == "preProcess3") {
dfMerged <- preProcess3(dfMerged)
} else if(preProcessFuncName == "preProcess4") {
dfMerged <- preProcess4(dfMerged)
} else if(preProcessFuncName == "preProcess5") {
dfMerged <- preProcess4(dfMerged, chisq_threshold_pvalue = 0.001)
} else if(preProcessFuncName == "preProcess6") {
dfMerged <- preProcess6(dfMerged, chisq_threshold_pvalue = 0.001)
} else if(preProcessFuncName == "preProcess7") {
dfMerged <- preProcess6(dfMerged, chisq_threshold_pvalue = 0.05)
}
names(dfMerged)
table(dfMerged$IsLiberal, dfMerged$Party)
dfMerged$IsLiberal <- "unknown"
dfMerged <- dfMerged %>%
mutate(IsLiberal = case_when(Q109244 == "Yes" ~ "Yes",
Q115611 == "Yes" ~ "No",
Q113181 == "Yes" ~ "No",
Q113181 == "No" & Q115611 == "No" & Q109244 == "No" ~ "Yes"))
str(dfMerged)
dfMerged$IsLiberal <- "unknown"
dfMerged <- dfMerged %>%
mutate(IsLiberal = case_when(Q109244 == "Yes" ~ "Yes",
Q115611 == "Yes" ~ "No",
Q113181 == "Yes" ~ "No",
Q113181 == "No" & Q115611 == "No" & Q109244 == "No" ~ "Yes"))
dfMerged$IsLiberal <- "unknown"
dfMerged <- dfMerged %>%
mutate(IsLiberal = case_when(.$Q109244 == "Yes" ~ "Yes",
.$Q115611 == "Yes" ~ "No",
.$Q113181 == "Yes" ~ "No",
.$Q113181 == "No" & .$Q115611 == "No" & .$Q109244 == "No" ~ "Yes"))
preProcess6 <- function(dfMerged, chisq_threshold_pvalue = 0.05) {
# Since many respondents have not provided demographic and survey questions, # of valid responses need to be recorded
dfMerged$NumSurveyAns <- apply(dfMerged[vFeaturesSurveyQues], 1, function(Z) sum(!is.na(Z)))
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB)) %>%
mutate(Age = 2016 - YOB) %>%
mutate(Age_group = cut(Age, c(0, 18, 44, 64, 90)))
# With chisq goodness of fit determine survey questions whose probability distribution
# is very different from Party distribution in the data set
dfXsq <- data.frame()
for(surveyQues in vFeaturesSurveyQues) {
tbl <- table(unlist(dfMerged[[TARGET_VAR]]), unlist(dfMerged[[surveyQues]]))
Xsq <- chisq.test(tbl)
dfXsq <- rbind(dfXsq, data.frame(surveyQues = surveyQues, pvalue = Xsq$p.value))
}
dfXsq <- dfXsq %>% dplyr::filter(pvalue < chisq_threshold_pvalue) %>% arrange(pvalue)
vFeaturesSurveyInterest <- as.character(dfXsq$surveyQues)
# Valid responses to interesting questions
dfMerged$NumSurveyAnsInterest <- apply(dfMerged[vFeaturesSurveyInterest], 1, function(Z) sum(!is.na(Z)))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set 'dnr' to factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- "dnr"
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
dfMerged[[feature]] <- relevel(dfMerged[[feature]], "dnr")
}
}
# Create a feature 'IsLiberal' from the answers to the survey questions of interest
dfMerged$IsLiberal <- "unknown"
dfMerged <- dfMerged %>%
mutate(IsLiberal = case_when(.$Q109244 == "Yes" ~ "Yes",
.$Q115611 == "Yes" ~ "No",
.$Q113181 == "Yes" ~ "No",
.$Q113181 == "No" & .$Q115611 == "No" & .$Q109244 == "No" ~ "Yes"))
# reduce survey questions in the final data set
dfMerged <- dfMerged[c(ID_VAR, TARGET_VAR, "Age_group", "NumSurveyAnsInterest", "IsLiberal",
vFeaturesDemographic, vFeaturesSurveyInterest)]
dfMerged <- dfMerged %>% select(-YOB)
return(dfMerged)
}
########################################################################################################################
# Select Preprocessing function
########################################################################################################################
# Combine raw training and test sets
dfMerged <- rbind(dfRawTrain, dfRawTest)
summary(dfMerged)
preProcessFuncName <- "preProcess7"
if(preProcessFuncName == "preProcess1") {
dfMerged <- preProcess1(dfMerged)
} else if(preProcessFuncName == "preProcess2") {
dfMerged <- preProcess2(dfMerged)
} else if(preProcessFuncName == "preProcess3") {
dfMerged <- preProcess3(dfMerged)
} else if(preProcessFuncName == "preProcess4") {
dfMerged <- preProcess4(dfMerged)
} else if(preProcessFuncName == "preProcess5") {
dfMerged <- preProcess4(dfMerged, chisq_threshold_pvalue = 0.001)
} else if(preProcessFuncName == "preProcess6") {
dfMerged <- preProcess6(dfMerged, chisq_threshold_pvalue = 0.001)
} else if(preProcessFuncName == "preProcess7") {
dfMerged <- preProcess6(dfMerged, chisq_threshold_pvalue = 0.05)
}
names(dfMerged)
table(dfMerged$IsLiberal, dfMerged$Party)
table(dfMerged$IsLiberal, dfMerged$Party, useNA = "ifany")
table(dfMerged$IsLiberal, dfMerged$Party)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
names(dfTrain)
library(Matrix)
library(magrittr)
library(tidyverse)
library(ggplot2)
library(xgboost)
SEED <- 2016
ID_VAR <- "USER_ID"
TARGET_VAR <- "Party"
dfQuestions <- read_delim("questions.tsv", delim = "\t") %>% set_colnames(c("ID", "QnA"))
dfQuestions$ID <- paste0("Q", dfQuestions$ID)
dfRawTrain <- read_csv("train2016.csv", na = c("", NA))
dfRawTest <- read_csv("test2016.csv", na = c("", NA))
dfRawTest[[TARGET_VAR]] <- NA
names(dfRawTrain)
vFeaturesDemographic <- c("YOB", "Gender", "Income", "HouseholdStatus", "EducationLevel")
vFeaturesSurveyQues <- names(dfRawTrain)[!(names(dfRawTrain) %in% vFeaturesDemographic)]
# exclude USER_ID from survey questions
vFeaturesSurveyQues <- vFeaturesSurveyQues[!(vFeaturesSurveyQues %in% c(ID_VAR, TARGET_VAR))]
# Pre-process data - First way
########################################################################################################################
preProcess1 <- function(dfMerged) {
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set the maximum factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- names(which.max(table(dfMerged[[feature]])))
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
}
}
return(dfMerged)
}
# Pre-process data - Second way
########################################################################################################################
preProcess2 <- function(dfMerged) {
# Since many respondents have not provided demographic and survey questions, # of valid responses need to be recorded
dfMerged$NumSurveyAns <- apply(dfMerged[vFeaturesSurveyQues], 1, function(Z) sum(!is.na(Z)))
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set 'dnr' to factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- "dnr"
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
dfMerged[[feature]] <- relevel(dfMerged[[feature]], "dnr")
}
}
return(dfMerged)
}
# Pre-process data - Third way
#########################################################################################################################
preProcess3 <- function(dfMerged) {
# Since many respondents have not provided demographic and survey questions, # of valid responses need to be recorded
dfMerged$NumSurveyAns <- apply(dfMerged[vFeaturesSurveyQues], 1, function(Z) sum(!is.na(Z)))
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set 'dnr' to factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- "dnr"
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
dfMerged[[feature]] <- relevel(dfMerged[[feature]], "dnr")
}
}
# With chisq goodness of fit determine survey questions whose probability distribution
# is very different from Party distribution in the data set
dfXsq <- data.frame()
indexTarget <- which(names(dfMerged) == TARGET_VAR)
for(i in seq_along(vFeaturesSurveyQues)) {
indexQ <- which(names(dfMerged) == vFeaturesSurveyQues[i])
tbl <- table(unlist(dfMerged[,indexTarget]), unlist(dfMerged[,indexQ]))
Xsq <- chisq.test(tbl)
dfXsq <- rbind(dfXsq, data.frame(surveyQues = vFeaturesSurveyQues[i], pvalue = Xsq$p.value))
}
chisq_threshold_pvalue <- 0.05
dfXsq <- dfXsq %>% dplyr::filter(pvalue < chisq_threshold_pvalue) %>% arrange(pvalue)
vFeaturesSurveyInterest <- as.character(dfXsq$surveyQues)
# reduce survey questions in the final data set
return(dfMerged[c(ID_VAR, TARGET_VAR, "NumSurveyAns", vFeaturesDemographic, vFeaturesSurveyInterest)])
}
# Pre-process data - Fourth & Fifth way
#########################################################################################################################
preProcess4 <- function(dfMerged, chisq_threshold_pvalue = 0.05) {
# Since many respondents have not provided demographic and survey questions, # of valid responses need to be recorded
dfMerged$NumSurveyAns <- apply(dfMerged[vFeaturesSurveyQues], 1, function(Z) sum(!is.na(Z)))
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB)) %>%
mutate(Age = 2016 - YOB) %>%
mutate(Age_group = cut(Age, c(0, 18, 44, 64, 90)))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set 'dnr' to factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- "dnr"
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
dfMerged[[feature]] <- relevel(dfMerged[[feature]], "dnr")
}
}
# With chisq goodness of fit determine survey questions whose probability distribution
# is very different from Party distribution in the data set
dfXsq <- data.frame()
indexTarget <- which(names(dfMerged) == TARGET_VAR)
for(i in seq_along(vFeaturesSurveyQues)) {
indexQ <- which(names(dfMerged) == vFeaturesSurveyQues[i])
tbl <- table(unlist(dfMerged[,indexTarget]), unlist(dfMerged[,indexQ]))
Xsq <- chisq.test(tbl)
dfXsq <- rbind(dfXsq, data.frame(surveyQues = vFeaturesSurveyQues[i], pvalue = Xsq$p.value))
}
dfXsq <- dfXsq %>% dplyr::filter(pvalue < chisq_threshold_pvalue) %>% arrange(pvalue)
vFeaturesSurveyInterest <- as.character(dfXsq$surveyQues)
# reduce survey questions in the final data set
dfMerged <- dfMerged[c(ID_VAR, TARGET_VAR, "Age_group", "NumSurveyAns", vFeaturesDemographic, vFeaturesSurveyInterest)]
dfMerged <- dfMerged %>% select(-YOB)
return(dfMerged)
}
# Pre-process data - Sixth & Seventh way
#########################################################################################################################
preProcess6 <- function(dfMerged, chisq_threshold_pvalue = 0.05) {
# Since many respondents have not provided demographic and survey questions, # of valid responses need to be recorded
dfMerged$NumSurveyAns <- apply(dfMerged[vFeaturesSurveyQues], 1, function(Z) sum(!is.na(Z)))
# Set median age in missing and outlier values
medianYOB <- median(dfMerged$YOB, na.rm = T)
dfMerged <- dfMerged %>%
mutate(YOB = ifelse(is.na(YOB) | YOB <= 1930 | YOB >= 2003, medianYOB, YOB)) %>%
mutate(Age = 2016 - YOB) %>%
mutate(Age_group = cut(Age, c(0, 18, 44, 64, 90)))
# With chisq goodness of fit determine survey questions whose probability distribution
# is very different from Party distribution in the data set
dfXsq <- data.frame()
for(surveyQues in vFeaturesSurveyQues) {
tbl <- table(unlist(dfMerged[[TARGET_VAR]]), unlist(dfMerged[[surveyQues]]))
Xsq <- chisq.test(tbl)
dfXsq <- rbind(dfXsq, data.frame(surveyQues = surveyQues, pvalue = Xsq$p.value))
}
dfXsq <- dfXsq %>% dplyr::filter(pvalue < chisq_threshold_pvalue) %>% arrange(pvalue)
vFeaturesSurveyInterest <- as.character(dfXsq$surveyQues)
# Valid responses to interesting questions
dfMerged$NumSurveyAnsInterest <- apply(dfMerged[vFeaturesSurveyInterest], 1, function(Z) sum(!is.na(Z)))
# Assign 'dnr' to unanswered survey questions and convert to factors
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.character)
dfMerged[vFeaturesSurveyQues][is.na(dfMerged[vFeaturesSurveyQues])] <- "dnr"
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], as.factor)
dfMerged[vFeaturesSurveyQues] <- lapply(dfMerged[vFeaturesSurveyQues], relevel, "dnr")
# Set 'dnr' to factor level where NA
for(feature in vFeaturesDemographic) {
if(class(dfMerged[[feature]]) == "character") {
dfMerged[[feature]][is.na(dfMerged[[feature]])] <- "dnr"
dfMerged[[feature]] <- as.factor(dfMerged[[feature]])
dfMerged[[feature]] <- relevel(dfMerged[[feature]], "dnr")
}
}
# Create a feature 'IsLiberal' from the answers to the survey questions of interest
dfMerged <- dfMerged %>%
mutate(IsLiberal = case_when(.$Q109244 == "Yes" ~ "Yes",
.$Q115611 == "Yes" ~ "No",
.$Q113181 == "Yes" ~ "No",
.$Q113181 == "No" & .$Q115611 == "No" & .$Q109244 == "No" ~ "Yes")) %>%
mutate(IsLiberal = ifelse(is.na(IsLiberal), "unknown", IsLiberal))
# reduce survey questions in the final data set
dfMerged <- dfMerged[c(ID_VAR, TARGET_VAR, "Age_group", "NumSurveyAnsInterest", "IsLiberal",
vFeaturesDemographic, vFeaturesSurveyInterest)]
dfMerged <- dfMerged %>% select(-YOB)
return(dfMerged)
}
########################################################################################################################
# Select Preprocessing function
########################################################################################################################
# Combine raw training and test sets
dfMerged <- rbind(dfRawTrain, dfRawTest)
summary(dfMerged)
preProcessFuncName <- "preProcess7"
if(preProcessFuncName == "preProcess1") {
dfMerged <- preProcess1(dfMerged)
} else if(preProcessFuncName == "preProcess2") {
dfMerged <- preProcess2(dfMerged)
} else if(preProcessFuncName == "preProcess3") {
dfMerged <- preProcess3(dfMerged)
} else if(preProcessFuncName == "preProcess4") {
dfMerged <- preProcess4(dfMerged)
} else if(preProcessFuncName == "preProcess5") {
dfMerged <- preProcess4(dfMerged, chisq_threshold_pvalue = 0.001)
} else if(preProcessFuncName == "preProcess6") {
dfMerged <- preProcess6(dfMerged, chisq_threshold_pvalue = 0.001)
} else if(preProcessFuncName == "preProcess7") {
dfMerged <- preProcess6(dfMerged, chisq_threshold_pvalue = 0.05)
}
names(dfMerged)
table(dfMerged$IsLiberal, dfMerged$Party)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_tune.R', echo=TRUE)
source('C:/Backups/Kaggle/VotersParty/model_xgboost_ensemble.R', echo=TRUE)
